name: Publish prebuilt binaries
on:
  workflow_dispatch:
    inputs:
      prerelease:
        type: boolean
        default: false
        description: Mark as a prerelease

jobs:
  create-release:
    name: Create the Github release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v5
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        draft: true
        skipIfReleaseExists: true
        prerelease: ${{ inputs.prerelease }}


  build:
    name: Build for ${{ matrix.id }}
    needs: [ create-release ]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            id: linux-x64
          - platform: macos-14
            id: darwin-arm64
          - platform: macos-13
            id: darwin-x64
          - platform: windows-2022
            id: win32-x64

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install NuGet Packages (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
          nuget install PCRE2 -OutputDirectory C:\Tools
          nuget install Bison -OutputDirectory C:\Tools
    
    - name: Prepare Environment (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
          cat << EOF >> $GITHUB_ENV
          PCRE2_PATH=$(cygpath -w "$(ls -d /C/Tools/PCRE2*)")
          EOF
          BISON_PATH=$(cygpath -w "$(ls -d /C/Tools/Bison*)/bin")
          echo "$BISON_PATH" >> $GITHUB_PATH

    - name: Prepare Environment (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install bison

    - name: Configure (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
          cmake --version
          cmake -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\dist\swig" `
          -DCMAKE_C_FLAGS="/W3 /EHsc /DPCRE2_STATIC" `
          -DCMAKE_CXX_FLAGS="/W3 /EHsc /DPCRE2_STATIC" `
          -DPCRE2_INCLUDE_DIR="$env:PCRE2_PATH\include" `
          -DPCRE2_LIBRARY="$env:PCRE2_PATH\lib\pcre2-8-static.lib" `
          -DLINK_FLAGS="/NODEFAULTLIB:MSVCRT" -S . -B .

    - name: Configure (Linux)
      if: runner.os == 'Linux'
      run: |
          cmake --version
          cmake \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/dist/swig" \
            -DSWIG_RELOCATABLE=ON \
            -DSWIG_LIB=Lib \
            .

    - name: Configure (macOS)
      if: runner.os == 'macOS'
      run: |
          cmake \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/dist/swig" \
            -DBISON_EXECUTABLE=$(brew --prefix bison)/bin/bison \
            -DSWIG_RELOCATABLE=ON \
            -DSWIG_LIB=Lib \
            .

    - name: Build
      run: cmake --build . --config Release

    - name: Install
      run: cmake --install .

    - name: Run CMake tests
      run: ctest --output-on-failure -V -C Release

    - name: Pack the binaries
      shell: bash
      run: |
        cd dist
        tar -zcvf ../${{ matrix.id }}.tar.gz swig

    - name: Publish the binaries
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: ${{ matrix.id }}.tar.gz
        updateOnlyUnreleased: true
        omitNameDuringUpdate: true
        omitDraftDuringUpdate: true
        omitPrereleaseDuringUpdate: true


  test:
    name: Test ${{ matrix.id }}
    needs: [ build ]
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            id: linux-x64
          - platform: macos-14
            id: darwin-arm64
          - platform: macos-13
            id: darwin-x64
          - platform: windows-2022
            id: win32-x64
    
    steps:
    - name: Download the binaries
      run: |
        gh release download  ${{ github.ref_name }} -p '${{ matrix.id }}*'
        tar zxvf ${{ matrix.id }}.tar.gz

    - name: Check swiglib
      run: ./swig/swig -swiglib

    - name: Checkout an example
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          Examples/javascript/class/example.i
          Examples/javascript/class/example.h

    - name: Generate example wrappers
      run: ./swig/swig -javascript -napi -c++ Examples/javascript/class/example.i

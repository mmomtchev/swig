name: JavaScript CI

on:
  push:
    branches:
      - '*'
      - '!main'
    paths-ignore:
      - 'CHANGES*'
      - 'Doc/**'
      - 'appveyor.yml'


permissions:
  contents: read

jobs:
  linux:

    runs-on: ${{ matrix.os || 'ubuntu-22.04' }}

    # By default, the name of the build is the language used and SWIG options, but matrix entries
    # can define the additional "desc" field with any additional information to include in the name.
    name: ${{ matrix.SWIGLANG || 'none' }}${{ matrix.PY2 }}${{matrix.ASAN && ' ASAN'}} ${{ matrix.ENGINE}} ${{ matrix.VER }} ${{ matrix.SWIG_FEATURES }} ${{ (matrix.compiler || 'gcc') }}${{ matrix.GCC }} ${{ matrix.CPPSTD }} ${{ matrix.CSTD }} ${{ matrix.desc }}

    strategy:
      matrix:
        include:
        - SWIGLANG: ""
          CPPFLAGS: "-DDOH_POISON"
        - SWIGLANG: ""
          GCC: 9
        - SWIGLANG: ""
          GCC: 10
        - SWIGLANG: ""
          GCC: 11
        - SWIGLANG: ""
          GCC: 12
          os: ubuntu-22.04
        - SWIGLANG: ""
          GCC: 13
          os: ubuntu-22.04
        - SWIGLANG: ""
          compiler: clang
          os: ubuntu-22.04
        - SWIGLANG: csharp
        - SWIGLANG: d
          VER: 'ldc'
          CPPSTD: c++14
        - SWIGLANG: d
          VER: 'gdmd'
          CPPSTD: c++11
        - SWIGLANG: d
          VER: '2.103.1'
          CPPSTD: c++17
        - SWIGLANG: go
          VER: '1.20'
          CSTD: gnu11
        - SWIGLANG: go
          VER: '1.24'
          CSTD: gnu99 # Go 1.24 doesn't build with -Wdeclaration-after-statement
        - SWIGLANG: guile
        - SWIGLANG: guile
          VER: '2.2'
        - SWIGLANG: guile
          VER: '3.0'
        - SWIGLANG: java
        - SWIGLANG: javascript
          ENGINE: jsc
          VER: '4.0'
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++11
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++11
          ASAN: 1
        - SWIGLANG: javascript
          ENGINE: node
          VER: '12'
          CPPSTD: c++11
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          SWIG_FEATURES: -async -w470
          desc: Async
          cacheid: -napi-async
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          SWIG_FEATURES: -async -async-locking -DSWIG_NAPI_FULL_LOCKING=1
          ASAN: 1
          desc: Async+ASAN
          cacheid: -napi-async-locked-asan
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          SWIG_FEATURES: -async -async-locking -DSWIG_NAPI_FULL_LOCKING=1
          desc: Async w/ locking
          cacheid: -napi-async-locked
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          SWIG_FEATURES: -typescript
          desc: TypeScript
          cacheid: -napi-typescript
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          SWIG_FEATURES: -typescript -async -w470
          desc: TypeScript w/ async
          cacheid: -napi-typescript-async
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          SWIG_FEATURES: -split
          desc: Code splitting
          cacheid: -napi-splitting
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          SWIG_FEATURES: -split -async -async-locking -DSWIG_NAPI_FULL_LOCKING=1
          desc: Async w/ splitting & locking
          cacheid: -napi-splitting-async
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          COMPILER: emscripten
          desc: WASM
          cacheid: -napi-wasm
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '18'
          CPPSTD: c++14
          COMPILER: emscripten
          SWIG_FEATURES: -async -async-locking -DSWIG_NAPI_FULL_LOCKING=1
          desc: WASM w/ async & locking
          cacheid: -napi-wasm-async
        - SWIGLANG: lua
        - SWIGLANG: octave
          CPPSTD: c++11
        - SWIGLANG: perl5
        - SWIGLANG: php
          VER: '8.3'
          CPPSTD: c++11
        - SWIGLANG: python
          PY2: 2
        - SWIGLANG: python
          VER: '3.10'
        - SWIGLANG: python
          VER: '3.12'
          CSTD: gnu99
        - SWIGLANG: python
          PY2: 2
          SWIG_FEATURES: -builtin
        - SWIGLANG: r
          os: ubuntu-24.04
        - SWIGLANG: ruby
          VER: '2.0'
        - SWIGLANG: scilab
          VER: '6.0.2'
        - SWIGLANG: tcl
        # c++11 testing
        - SWIGLANG: csharp
          CPPSTD: c++11
        - SWIGLANG: guile
          CPPSTD: c++11
        - SWIGLANG: java
          CPPSTD: c++11
        - SWIGLANG: javascript
          ENGINE: jsc
          VER: '4.1'
          os: ubuntu-22.04
          CPPSTD: c++11
        - SWIGLANG: javascript
          ENGINE: node
          VER: '14'
          CPPSTD: c++11
        - SWIGLANG: javascript
          ENGINE: node
          VER: '16'
          CPPSTD: c++14
        - SWIGLANG: java
          CPPSTD: c++17
          GCC: 13
        - SWIGLANG: javascript
          ENGINE: node
          VER: '18'
          CPPSTD: c++17
          GCC: 13
        - SWIGLANG: javascript
          ENGINE: node
          VER: '20'
          CPPSTD: c++20
          GCC: 13
          os: ubuntu-22.04
        #- SWIGLANG: ocaml
        #  CPPSTD: c++17
        #  GCC: 13
        #  continue-on-error: true
        #  os: ubuntu-18.04 # ocaml-4.08 in ubuntu-20.04 not yet working
      # Run all of them, as opposed to aborting when one fails
      fail-fast: false

    env:
      SWIGLANG: ${{ matrix.SWIGLANG }}
      PY2: ${{ matrix.PY2 }}
      VER: ${{ matrix.VER }}
      ENGINE: ${{ matrix.ENGINE }}
      SWIG_FEATURES: ${{ matrix.SWIG_FEATURES }}
      GCC: ${{ matrix.GCC }}
      CSTD: ${{ matrix.CSTD }}
      CPPSTD: ${{ matrix.CPPSTD }}
      CPPFLAGS: ${{ matrix.CPPFLAGS }}
      COMPILER: ${{ matrix.compiler || 'gcc' }}
      ASAN: ${{ matrix.ASAN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.os || 'ubuntu-22.04' }}-${{ matrix.compiler || 'gcc' }}${{ matrix.GCC }}${{ matrix.cacheid }}

# Uncomment to debug via ssh, see https://github.com/mxschmitt/action-tmate
#    - name: Setup tmate session
#      uses: mxschmitt/action-tmate@v3

    - name: Install Dependencies
      run: |
          set -x
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          echo PATH="$PATH" >> $GITHUB_ENV

          source $GITHUB_WORKSPACE/Tools/GHA-linux-install.sh
          echo WITHLANG="$WITHLANG" >> $GITHUB_ENV

          case $(uname) in
              Linux)
                  cpu_count=$(nproc)
                  ;;

              Darwin)
                  cpu_count=$(sysctl -n hw.ncpu)
                  ;;

              *)
                  cpu_count=1
                  ;;
          esac

          if [[ $cpu_count != 1 ]]; then
            echo SWIGJOBS=-j$cpu_count >> $GITHUB_ENV
          fi

          if test '${{ matrix.compiler }}' = 'clang'; then
            CC="clang"
            CXX="clang++"

            CFLAGS="$CFLAGS -fPIE"
            CXXFLAGS="$CXXFLAGS -fPIE"
          elif test '${{ matrix.compiler }}' = 'emscripten'; then
            git clone https://github.com/emscripten-core/emsdk.git
            (
              cd emsdk
              git pull
              sh ./emsdk install latest
              sh ./emsdk activate latest
            )
            source $GITHUB_WORKSPACE/emsdk/emsdk_env.sh
            echo EMSDK=$EMSDK >> $GITHUB_ENV
            echo EMCC_LOGGING=0 >> $GITHUB_ENV

            TARGET_CC="emcc"
            TARGET_CXX="em++"
            CC="cc"
            CXX="c++"

          elif test -n "$GCC"; then
            CC="gcc-$GCC"
            CXX="g++-$GCC"
          else
            CC="gcc"
            CXX="g++"
          fi

          [ -z "$TARGET_CC" ] && TARGET_CC="$CC"
          [ -z "$TARGET_CXX" ] && TARGET_CXX="$CXX"

          export CC CXX TARGET_CC TARGET_CXX

          echo CC="$CC" >> $GITHUB_ENV
          echo CXX="$CXX" >> $GITHUB_ENV
          echo TARGET_CC="$TARGET_CC" >> $GITHUB_ENV
          echo TARGET_CXX="$TARGET_CXX" >> $GITHUB_ENV

          ls -la $(which $CC) $(which $CXX) $(which $TARGET_CC) $(which $TARGET_CXX)
          $CC --version
          $CXX --version
          $TARGET_CC --version
          $TARGET_CXX --version

    - name: Configure
      run: |
          source $GITHUB_WORKSPACE/Tools/CI-linux-environment.sh
          set -x

          if [[ -z "$CSTD" ]]; then
            case "$CPPSTD" in
              c++11) export CSTD=c11 ;;
              c++14) export CSTD=c11 ;;
              c++17) export CSTD=c17 ;;
              c++20) export CSTD=c17 ;;
            esac
            echo CSTD="$CSTD" >> $GITHUB_ENV
          fi
          if test -z "$CPPSTD"; then CONFIGOPTS+=("--disable-cpp11-testing"); fi
          if test -n "$CPPSTD"; then CONFIGOPTS+=("CXXFLAGS=-std=$CPPSTD $CXXFLAGS"); fi
          if test -n "$CSTD"; then CONFIGOPTS+=("CFLAGS=-std=$CSTD $CFLAGS"); fi
          if test -n "$SWIGLANG"; then CONFIGOPTS+=(--without-alllang --with-$WITHLANG); fi
          if test "$PY2" = "2"; then CONFIGOPTS+=(--with-python=python2 --without-python3); fi
          echo "${CONFIGOPTS[@]}"
          ./autogen.sh && mkdir -p build/build && cd build/build && ../../configure "${CONFIGOPTS[@]}"

    - name: Build
      working-directory: build/build
      run: |
          set -x
          make -s $SWIGJOBS
          ./swig -version && ./swig -pcreversion

    - name: Test
      working-directory: build/build
      run: |
          source $GITHUB_WORKSPACE/Tools/CI-linux-environment.sh
          set -x

          if test -z "$SWIGLANG"; then
            make $SWIGJOBS check-ccache
            make $SWIGJOBS check-errors-test-suite
          else
            case "$SWIGLANG" in
              javascript)
                case "$ENGINE" in
                  v8 | jsc)
                    # Running tests using v8 or jsc involves creating a custom
                    # interpreter in Tools/javascript, which is currently broken
                    # for parallel builds (we attempt to update this interpreter
                    # while running, resulting in "Text file busy" error).
                    unset SWIGJOBS
                esac
                ;;
            esac

            # Stricter compile flags for examples. Various headers and SWIG generated code prevents full use of -pedantic.
            cflags=$($GITHUB_WORKSPACE/Tools/testflags.py --language $SWIGLANG --cflags --std=$CSTD --compiler=$CC)
            cxxflags=$($GITHUB_WORKSPACE/Tools/testflags.py --language $SWIGLANG --cxxflags --std=$CPPSTD --compiler=$CC)
            make check-$SWIGLANG-version
            make check-$SWIGLANG-enabled
            make $SWIGJOBS check-$SWIGLANG-examples CFLAGS="$cflags" CXXFLAGS="$cxxflags"
            make $SWIGJOBS check-$SWIGLANG-test-suite CC="$TARGET_CC" CXX="$TARGET_CXX" CFLAGS="$cflags" CXXFLAGS="$cxxflags"
          fi

    - name: Install
      working-directory: build/build
      run: |
          set -x
          if test -z "$SWIGLANG"; then sudo make install && swig -version && ccache-swig -V; fi

    - name: Clean
      working-directory: build/build
      run: |
          set -x
          make check-maintainer-clean && ../../configure


  windows:
    # When continue-on-error is true for an individual build,
    # that build can fail (it'll show red),
    # but it won't fail the overall tests
    continue-on-error: ${{ matrix.continue-on-error || false }}

    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2025-Readme.md
    runs-on: ${{ matrix.os || 'windows-2025' }}

    # The name of the test follow the tested language
    name: >
      ${{ matrix.SWIGLANG }} ${{ matrix.VER }}
      ${{ matrix.SWIG_FEATURES }}
      ${{ matrix.COMPILER || 'msvc' }} ${{ matrix.os }}
      ${{ matrix.continue-on-error && '(can fail)' }}

    strategy:
      matrix:
        include:
        - SWIGLANG: javascript
          ENGINE: napi
          VER: '22'
          CPPSTD: c++11
      # Run all of them, as opposed to aborting when one fails
      fail-fast: false

    env:
      CFLAGS: '-O2'
      CXXFLAGS: '-O2'
      CCCL_OPTIONS: '--cccl-muffle /W3 /EHsc'
      PCRE2_CCCL_LD: '-lpcre2-8-static --cccl-link /NODEFAULTLIB:MSVCRT'
      CHECK_OPTIONS: 'CSHARPOPTIONS=-platform:x64'
      SWIGLANG: ${{ matrix.SWIGLANG }}
      VER: ${{ matrix.VER }}
      SWIG_FEATURES: ${{ matrix.SWIG_FEATURES }}
      COMPILER: ${{ matrix.COMPILER }}
      OS: ${{ matrix.os }}
      INSTALL: ${{ matrix.INSTALL }}

# cl.exe:
#  https://learn.microsoft.com//cpp/build/reference/compiler-options
#  /EHc  extern "C" defaults to nothrow.
#  /EHs  Enable C++ exception handling (no SEH exceptions).
#  /W3   Warning level.
#  /WX   Treat warnings as errors.
#  https://learn.microsoft.com//cpp/build/reference/linker-options
#  cl.exe pass linker:
#  /VERBOSE:LIB        Outputs progress messages during the link process.
#  /NODEFAULTLIB:lib   Ignore library 'lib'

    steps:
    - name: Machine Info
      shell: powershell
      run: |
          systeminfo | findstr /B /C:"OS Name" /B /C:"OS Version"

    - name: Checkout
      uses: actions/checkout@v4
      with:
        show-progress: false

    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ matrix.os || 'windows-2025' }}-${{ matrix.COMPILER || 'msvc' }}

    - name: Install NuGet Packages
      if: ${{ env.COMPILER == '' }}
      shell: powershell
      run: |
          # 'nuget build for .NET: https://www.nuget.org/packages'
          nuget install PCRE2 -OutputDirectory C:\Tools
          nuget install boost -OutputDirectory C:\Tools

    # Set MSVC compilers path and environment variables.
    - name: Setup MSVC
      if: ${{ env.COMPILER == '' || env.SWIGLANG == 'csharp' }}
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    # Use GHA to install Node
    - name: Install Node.js
      if: matrix.SWIGLANG == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.VER }}

    - name: Prepare Environment
      shell: bash
      run: |
          uname --all

          if [[ "$COMPILER" = "gcc" ]]; then
            # MinGW-w64 variant to use
            mingw_variant=mingw-w64-x86_64
            mingw_dir=mingw64

            case "$SWIGLANG" in
            python)
              MORE_MSYS_PKGS+=" $mingw_variant-python"
              # MinGW-w64 using MSVCRT runtime seems to have an issue with finding
              # the proper STL library (iostream classes) on runtime,
              # As a workaround we use static link.
              # Once we switch to MinGW-w64 with UCRT runtime, the issue will be solved.
              # See: https://www.msys2.org/docs/environments/#msvcrt-vs-ucrt
              if [[ "$mingw_variant" = "mingw-w64-x86_64" ]]; then
                echo "EXAMPLE_LIBS=-static-libstdc++ -static-libgcc" >> $GITHUB_ENV
              fi
              ;;
            ruby)
              mingw_variant=mingw-w64-ucrt-x86_64
              MORE_MSYS_PKGS+=" $mingw_variant-gcc"
              # We need the MinGW-w64 using Universal CRT
              mingw_dir=ucrt64
              if [[ -n "$VER" ]]; then
                ruby_dir=$(ls -d /c/hostedtoolcache/windows/Ruby/$VER*)/x64/bin
                RUBYDIR=$(cygpath -w $ruby_dir)
                echo "$RUBYDIR" >> $GITHUB_PATH
              else
                MORE_MSYS_PKGS+=" $mingw_variant-ruby"
              fi
              ;;
            perl)
              MORE_MSYS_PKGS+=" $mingw_variant-perl"
              ;;
            esac

            # MinGW-w64 packages to install with MSYS2
            for n in binutils make autotools pcre2 boost; do
              MORE_MSYS_PKGS+=" $mingw_variant-$n"
            done

            # MinGW-w64 pcre2
            echo "PCRE2_CFLAGS=-I/$mingw_dir/include -DPCRE2_STATIC" >> $GITHUB_ENV
            echo "PCRE2_LIBS=-L/$mingw_dir/lib -lpcre2-8" >> $GITHUB_ENV

            echo "MORE_MSYS_PKGS=base-devel $MORE_MSYS_PKGS" >> $GITHUB_ENV
            echo "BOOST_PATH=/c/msys64/$mingw_dir" >> $GITHUB_ENV

            # gcc compiler location
            echo "MINGW_CC=/$mingw_dir/bin" >> $GITHUB_ENV
          else
             # COMPILER: cccl wrapping MSVC
            curl --retry 15 -s -L https://github.com/swig/cccl/raw/cccl-1.4/cccl -o /usr/bin/cccl
            chmod +x /usr/bin/cccl
            /usr/bin/cccl --version
            cp -p /usr/bin/cccl /c/msys64/usr/bin/cccl

            # Using pcre2 installed with NuGet
            PCRE2_PATH=$(ls -d /c/tools/PCRE2*)
            echo "PCRE2_CFLAGS=-I$PCRE2_PATH/include -DPCRE2_STATIC" >> $GITHUB_ENV
            echo "PCRE2_LIBS=-L$PCRE2_PATH/lib $PCRE2_CCCL_LD" >> $GITHUB_ENV

            echo "CXX=/usr/bin/cccl" >> $GITHUB_ENV
            echo "CC=/usr/bin/cccl" >> $GITHUB_ENV
            echo "BOOST_PATH=$(ls -d /c/tools/boost*)/lib/native" >> $GITHUB_ENV

            if [[ -n "$VER" ]]; then
              case "$SWIGLANG" in
              python)
                PYTHONDIR_UNIX=$(ls -d /c/hostedtoolcache/windows/Python/$VER*)/x64
                PYTHONDIR=$(cygpath -w $PYTHONDIR_UNIX)
                echo "$PYTHONDIR\\Script" >> $GITHUB_PATH
                echo "$PYTHONDIR" >> $GITHUB_PATH
                ;;
              ruby)
                RUBYDIR_UNIX=$(ls -d /c/hostedtoolcache/windows/Ruby/$VER*)/x64
                RUBYDIR=$(cygpath -w $RUBYDIR_UNIX)
                echo "$RUBYDIR\\bin" >> $GITHUB_PATH
                ;;
              esac
            fi
          fi # COMPILER

          # Java must use VER!
          if [[ "$SWIGLANG" = "java" ]]; then
            declare -n java_path="JAVA_HOME_${VER}_X64"
            echo "JAVA_HOME=$java_path" >> $GITHUB_ENV
          fi

          if [[ "$SWIGLANG" = "javascript" ]]; then
            npm install -g node-gyp
            npx -g node-gyp install
            npm install -g node-addon-api@8.1.0
            if [ "$COMPILER" == "emscripten" ]; then
                    npm install --ignore-scripts -g emnapi @emnapi/runtime
            fi
            [[ ${SWIG_FEATURES} =~ typescript ]] && npm install -g typescript @types/node
          fi

          echo "SWIGJOBS=-j$NUMBER_OF_PROCESSORS" >> $GITHUB_ENV

          echo 'C:\msys64\usr\bin' >> $GITHUB_PATH

    - name: Install MSYS2 Packages
      shell: cmd
      run: |
          rem 'MSYS2 uses MinGW-w64 https://packages.msys2.org/'
          pacman -Syu --noconfirm --needed
          if %ErrorLevel% NEQ 0 (exit 1)
          pacman -Syu --noconfirm --needed autoconf automake bison %MORE_MSYS_PKGS%
          if %ErrorLevel% NEQ 0 (exit 1)

    - name: Autoconf
      shell: bash
      run: |
          uname --all

          if [[ -z "$COMPILER" ]]; then
            which cl.exe
            cl.exe /? 2>&1 | head -n1
          else
            # Use MinGW-w64 compiler
            # We can not use GITHUB_PATH, as bash insert /usr/bin
            export PATH="$MINGW_CC:$PATH"

            which gcc
            gcc --version | head -n1
            which g++
            g++ --version | head -n1
          fi

          case "$SWIGLANG" in
          csharp)
            which csc.exe
            csc.exe /? | head -n1
            ;;
          python)
            which python.exe
            python -V
            ;;
          ruby)
            which ruby.exe
            ruby -v
            ;;
          perl)
            which perl.exe
            perl -v | head -n3
            ;;
          esac

          make --version | head -n2

          ./autogen.sh

    - name: Configure
      shell: bash
      run: |
          if [[ "$COMPILER" = "gcc" ]]; then
            # Use MinGW-w64 compiler
            export PATH="$MINGW_CC:$PATH"
            ./configure --disable-dependency-tracking --with-boost="$BOOST_PATH" --with-csharp-compiler="csc.exe"
          else
             # cccl wrapping MSVC
            ./configure --disable-dependency-tracking --with-boost="$BOOST_PATH" --with-csharp-compiler="csc.exe" --disable-ccache
          fi

    - name: Build
      shell: bash
      run: |
          if [[ "$COMPILER" = "gcc" ]]; then
            # Use MinGW-w64 compiler
            export PATH="$MINGW_CC:$PATH"
          fi

          make -s $SWIGJOBS

    # Test the Windows swig have a proper SWIG library path
    - name: Test swiglib
      shell: bash
      run: |
          # path is based on executable location
          if ! [[ "$(./swig.exe -swiglib)" = "$(cygpath -w "$PWD")\\Lib" ]]; then
            exit 1
          fi

    - name: Test
      shell: bash
      run: |
          if [[ "$COMPILER" = "gcc" ]]; then
            # Use MinGW-w64 compiler
            export PATH="$MINGW_CC:$PATH"
          fi
          ./swig.exe -version
          make check-$SWIGLANG-version
          make check-$SWIGLANG-enabled
          make -k check-$SWIGLANG-examples $SWIGJOBS $CHECK_OPTIONS
          make -k check-$SWIGLANG-test-suite $SWIGJOBS $CHECK_OPTIONS

    - name: Install
      if: ${{ env.INSTALL == 'true' }}
      shell: bash
      run: |
          make -s install > /dev/null

          which swig.exe
          swig.exe -version

          # TODO: Make install of ccache-swig do not work on Windows
          #if [[ "$COMPILER" = "gcc" ]]; then
          #  which ccache-swig.exe
          #  ccache-swig.exe -V
          #fi

    # The test by itself is not related to the installation.
    # We just want to save testing time :-)
    - name: Clean
      if: ${{ env.INSTALL == 'true' }}
      shell: bash
      run: |
          make check-maintainer-clean

Below are the changes for the current release.
See the CHANGES file for changes in older releases.
See the RELEASENOTES file for a summary of changes in each release.
Issue # numbers mentioned below can be found on Github. For more details, add
the issue number to the end of the URL: https://github.com/swig/swig/issues/

Version 4.4.0 (in progress)
===========================

2024-11-09: wsfulton
            #3064 Perform repeated typedef lookups instead of a single typedef
            lookup on the type being applied in %apply when looking for a family
            of typemaps to apply.

2024-11-01: wsfulton
            Fix internal error handling parameters that are typedefs to references
            when using the compactdefaultargs feature.

2024-10-30: wsfulton
            #1851 Fix handling of parameters with default arguments that are
            initializer lists when using -keyword or the compactdefaultargs option.

2024-10-27: olly
	    #3058 Fix precedence of casts, which should have the same high
	    precedence as unary plus and minus, but actually had a lower
	    precedence than anything else.  This could lead to the wrong type
	    being deduced in obscure cases, but also prevented SWIG deducing a
	    type for expressions such as (0)*1+2 which SWIG parses as a cast
	    and then fixes up afterwards.  A bug fixed in 4.3.0 made this
	    latter problem manifest more often (previously type deduction
	    happened to work for (0)*1+2 due to an internal field not getting
	    cleared properly).

2024-10-25: olly
	    [Guile] Allow wrapping anything with a `varout` typemap as a
	    constant.

2024-10-24: olly
	    [Perl] https://sourceforge.net/p/swig/bugs/1134/ Ensure C++
	    local variables get destroyed before throwing a Perl exception.

2024-10-22: olly
	    #3034 SWIG's testsuite is now free of SWIG warnings for all target
	    languages except mzscheme and the SWIG -Werror option is now
	    enabled automatically to ensure this doesn't regress.

2024-10-22: olly
	    #2998 Drop support for specifying SWIG's internal type string
	    representation in interface files.  This "secret developer feature"
	    was only documented in developer documentation, and had no test
	    coverage.

	    It allowed specifying an SWIG internal syntax type string, e.g.:

	      `p.a(10).p.f(int, p.f(int).int)` foo(int, int (*x)(int));

	    In the unlikely event that anyone was using this, we recommend you
	    use the standard C/C++ type syntax instead, which will work with
	    previous SWIG releases too, e.g.:

	      (*(*foo(int, int (*)(int)))[10])(int, int (*)(int));

	    The C/C++ syntax has the major advantage of being the same syntax
	    that C/C++ compilers use.

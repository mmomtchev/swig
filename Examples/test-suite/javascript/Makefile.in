#######################################################################
# Makefile for javascript test-suite
#######################################################################

LANGUAGE     = javascript
NODEGYP = @NODEGYP@
NODEJS = @NODEJS@
TSC = @TSC@
SCRIPTSUFFIX = _runme.js
SCRIPTASYNCSUFFIX = _async_runme.mjs
SCRIPTWASMSUFFIX = _wasm_runme.mjs
OBJEXT = @OBJEXT@
SO = @SO@
NPM_PREFIX = @NODENPM_PREFIX@

HAVE_CXX11   = @HAVE_CXX11@
HAVE_CXX14   = @HAVE_CXX14@
HAVE_CXX17   = @HAVE_CXX17@
HAVE_CXX20   = @HAVE_CXX20@
srcdir       = @srcdir@
top_srcdir   = @top_srcdir@
top_builddir = @top_builddir@

CPP_TEST_CASES += \
	iadd \
	inplaceadd \
	input \
	javascript_lib_arrays \
	li_factory \
	li_std_containers_int \
	li_std_map_member

# napi fails
FAILING_CPP_TESTS += \
	smart_pointer_static \

SWIGEXE   = $(top_builddir)/swig
SWIG_LIB_DIR = $(top_srcdir)/Lib

ifneq (, $(ENGINE))
    JSENGINE=$(ENGINE)
else
ifneq (, $(NODEJS))
    JSENGINE=node
else
ifneq (, @JSCENABLED@)
    JSENGINE=jsc
else
ifneq (, @JSV8ENABLED@)
    JSENGINE=v8
else
    # Shouldn't happen, but avoid empty value if it does.
    JSENGINE=node
endif
endif
endif
endif

ifneq (, $(V8_VERSION))
    JSV8_VERSION=$(V8_VERSION)
else
    JSV8_VERSION=0x031110
endif

ifeq (napi, $(ENGINE))
# Node-API specific tests
CPP_TEST_CASES += \
	napi_buffer

# napi_exports_file is a test that uses Node.js ES6 and has no meaning in WASM
ifneq (emcc, $(CC))
CPP_TEST_CASES += \
	napi_exports_file
napi_exports_file.cpptest: SCRIPTSUFFIX = _runme.mjs
napi_exports_file.cpptest: SWIGOPT += -exports $(srcdir)/napi_exports_file_dll.cjs
endif

ifneq (, $(ASYNC))
# async-specific tests
CPP_TEST_CASES += \
	napi_async_locking \
	napi_async_overloading \
	napi_async_reject \
	napi_async_feature
endif
endif

include $(srcdir)/../common.mk

# emscripten is cross-compilation, skip the platform flags
ifeq (emcc, $(CC))
      	EMNAPI_DIR = @EMNAPI_DIR@
        ifeq (, $(EMNAPI_DIR))
                $(error emnapi not found)
        endif
  	GYP_CXXFLAGS = -I@NODENAPI_DIR@
  	GYP_TEMPLATE = wasm_template
  	SWIGOPT += -D__EMSCRIPTEN__
  	EMNAPI_LIB = -lemnapi
# Some emscripten-specific warnings on certain tests
cpp11_lambda_functions.cpptest: GYP_CFLAGS = \"-Wno-unused-lambda-capture\",
li_typemaps_apply.cpptest: GYP_CFLAGS = \"-Wno-self-assign\",
li_typemaps.cpptest: GYP_CFLAGS = \"-Wno-self-assign\",
long_long_apply.cpptest: GYP_CFLAGS = \"-Wno-self-assign\",
overload_template.cpptest: GYP_LDFLAGS = \"-sASSERTIONS=1\",
overload_template_fast.cpptest: GYP_LDFLAGS = \"-sASSERTIONS=1\",
else
  	GYP_CXXFLAGS = @BOOST_CPPFLAGS@ @PLATCXXFLAGS@ -I@NODENAPI_DIR@
  	GYP_TEMPLATE = node_template
endif

SWIGOPT += -DV8_VERSION=$(JSV8_VERSION)

_setup = \
	echo -n "$(ACTION)ing $(LANGUAGE) ($(JSENGINE)) testcase $*" ;    \
	if [ -f $(SCRIPTDIR)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) ]; then	  \
	  echo -n " (with run test)" ;                                    \
	fi;                                                               \
	if [ -n "$(ASYNC)" ]; then	                                  \
	  echo -n " (async mode)" ;                                       \
	fi;                                                               \
	if [ -n "$(TYPESCRIPT)" ]; then	                                  \
	  echo -n " (TypeScript mode)" ;                                  \
	fi;                                                               \
	if [ -n "$(SPLIT)" ]; then	                                  \
	  echo -n " (split mode)" ;                                       \
	fi;                                                               \
	if [ "emcc" = "$(CC)" ]; then	                                  \
	  echo -n " (emscripten WASM build)" ;                            \
	fi;                                                               \
          echo
SWIGOPT += -$(JSENGINE)

TSCOPT = --typeRoots @NODETYPES_DIR@ --target es2017 --module esnext --moduleResolution node --allowSyntheticDefaultImports

ifeq ($(JSENGINE), $(filter $(JSENGINE), node napi))
  SWIGOPT += -DBUILDING_NODE_EXTENSION=1
  
  # shut up some warnings

  # dunno... ignoring generously
  apply_signed_char.cpptest: GYP_CFLAGS = \"-Wno-ignored-qualifiers\",
  constant_pointers.cpptest: GYP_CFLAGS = \"-Wno-ignored-qualifiers\",
  cpp11_ref_qualifiers.cpptest: GYP_CFLAGS = \"-Wno-ignored-qualifiers\",
  director_basic.cpptest: GYP_CFLAGS = \"-Wno-ignored-qualifiers\",
  enum_thorough.cpptest: GYP_CFLAGS = \"-Wno-ignored-qualifiers\",
  member_funcptr_galore.cpptest: GYP_CFLAGS = \"-Wno-ignored-qualifiers\",
  director_unwrap_result.cpptest: GYP_CFLAGS = \"-Wno-ignored-qualifiers\",

        # Produce a debug build (NAPI / V8):
	# DEBUG=1 make <test_name>.cpptest
	# Run with asan (NAPI only):
	# ASAN=1 ENGINE=napi make <test_name>.cpptest
	#
	ifneq (, $(ASAN))
		GYP_CFLAGS += \"-fsanitize=address\",
		DEBUG = 1
		ASAN_PRELOAD = $(shell $(CC) -print-file-name=libasan.so)
		LSAN_OPTIONS = suppressions=$(srcdir)/node_template/napi-leaks-suppression.txt
	endif
        ifneq (, $(DEBUG))
		GYP_OPTS = --debug
		BUILD = Debug
		ifeq (emcc, $(CC))
			GYP_CFLAGS += \"-gsource-map\",
			GYP_LDFLAGS += \"-gsource-map\",
		endif
	else
		BUILD = Release
	endif

        # async/TS mode can be enabled by ASYNC/TYPESCRIPT _or_ SWIG_FEATURES
        ifneq (, $(ASYNC))
		SWIGOPT += -async
	endif
        ifneq (,$(findstring async,$(SWIG_FEATURES)))
                ASYNC = 1
		ifeq (emcc, $(CC))
			GYP_CFLAGS += \"-pthread\", \"-DEMNAPI_WORKER_POOL_SIZE=4\",
			GYP_LDFLAGS += \"-pthread\", \"-DEMNAPI_WORKER_POOL_SIZE=4\", \"-sPTHREAD_POOL_SIZE=4\",
			EMNAPI_LIB = -lemnapi-mt
		endif
        endif
        ifneq (, $(TYPESCRIPT))
                ifeq (, $(TSC))
                        $(error No TypeScript compiler found)
                endif
		SWIGOPT += -typescript
	endif
        ifneq (,$(findstring typescript,$(SWIG_FEATURES)))
                TYPESCRIPT = 1
        endif
        SOURCES = "../$*_wrap.cxx"
        ifneq (,$(findstring split,$(SWIG_FEATURES)))
                SPLIT = 1		
                SOURCES = "<@(source_glob)"
        endif

	setup_node = \
		test -d $* || mkdir $* && \
		sed -e 's|$$testcase|$*|g; \
			s|$$cflags|$(GYP_CFLAGS)|g; \
			s|$$cxxflags|"$(GYP_CXXFLAGS)"|g; \
			s|$$ldflags|$(GYP_LDFLAGS)|g; \
			s|$$srcdir|$(srcdir)|g; \
			s|$$emnapidir|$(EMNAPI_DIR)|g; \
			s|$$emnapilib|$(EMNAPI_LIB)|g; \
			s|$$sources|$(SOURCES)|g;' \
			$(srcdir)/$(GYP_TEMPLATE)/binding.gyp.in > $*/binding.gyp && \
		sed -e 's|$$testcase|$*|g; s|$$build|$(BUILD)|g; \
			s|$$npmprefix|$(NPM_PREFIX)|g;' \
			$(srcdir)/$(GYP_TEMPLATE)/index.js.in > $*/index.js
		
	# Note: we need to use swig in C parse mode, but make node-gyp believe it is c++ (via file extension)
	swig_and_compile_c = \
		$(setup_node) && \
		$(MAKE) -f $(top_builddir)/$(EXAMPLES)/Makefile SRCDIR='$(SRCDIR)' \
		SWIG_LIB_DIR='$(SWIG_LIB_DIR)' SWIGEXE='$(SWIGEXE)' \
		SWIGOPT='-javascript $(SWIGOPT) -o $*_wrap.cxx $(srcdir)/../$*.i' swiginvoke && \
		MAKEFLAGS= $(COMPILETOOL) $(NODEGYP) --loglevel=silent --directory $* configure $(GYP_OPTS) build 1>>/dev/null

	swig_and_compile_cpp = \
		$(setup_node) && \
		$(MAKE) -f $(top_builddir)/$(EXAMPLES)/Makefile SRCDIR='$(SRCDIR)' \
		SWIG_LIB_DIR='$(SWIG_LIB_DIR)' SWIGEXE='$(SWIGEXE)' \
		SWIGOPT='-c++ -javascript $(SWIGOPT) $(srcdir)/../$*.i' swiginvoke && \
		MAKEFLAGS= $(COMPILETOOL) $(NODEGYP) --loglevel=silent --directory $* configure $(GYP_OPTS) build -j 1>>/dev/null

	run_testcase = \
		RUNME="$(srcdir)/$*$(SCRIPTSUFFIX)" && \
		if [ -f "$${RUNME}" ]; then \
			if [ "$(CC)" = "emcc" ]; then \
				sed -e \
					's@\(var\|let\|const\)[[:space:]]*\(.*\)[[:space:]]*=[[:space:]]*require(\("\|\x27\)\(.*\)\("\|\x27\))@import wasm_module from "'"$(PWD)"'/\4/index.js"; const \2 = await wasm_module;@g;' \
					$${RUNME} > $*$(SCRIPTWASMSUFFIX) \
				&& \
				RUNME=$*$(SCRIPTWASMSUFFIX); \
			fi && \
			if [ -n "$(ASYNC)" ]; then \
				sed -e \
					's@/\* await \*/@await resolve@g; \
					s@/\* async \*/@async@g; \
					s@\(var\|let\|const\)[[:space:]]*\(.*\)[[:space:]]*=[[:space:]]*require(\("\|\x27\)\(.*\)\("\|\x27\))@import \2 from "'"$(PWD)"'/\4/index.js"@g; \
					1s@^@import resolve from "./'$(srcdir)'/resolve.mjs"; @' \
					$${RUNME} > $*$(SCRIPTASYNCSUFFIX) \
				&& \
				RUNME=$*$(SCRIPTASYNCSUFFIX); \
			fi && \
			if grep -q '%target' $${RUNME}; then \
				sed -e "s@%target@$${PWD}@g;" $${RUNME} > $*_mjs_runme.mjs && \
				RUNME=$*_mjs_runme.mjs; \
			fi && \
			if [ -n "$(TYPESCRIPT)" ]; then \
				sed -e \
					's@\(var\|let\|const\)[[:space:]]*\(.*\)[[:space:]]*=[[:space:]]*require(\("\|\x27\)\(.*\)\("\|\x27\))@import \2 from "'"$(PWD)"'/\4/index.js"@g; \
					s|.*//[[:space:]]*@ts-replace\(.*\)|\1|g; ' \
					$${RUNME} > $*_ts_runme.ts && \
					cp $*.d.ts $*/index.d.ts && \
					$(TSC) $(TSCOPT) $*_ts_runme.ts && \
					mv $*_ts_runme.js $*_ts_runme.mjs && \
					RUNME=$*_ts_runme.mjs; \
			fi && \
			env NODE_PATH=$$PWD:$(srcdir) LD_PRELOAD=$(ASAN_PRELOAD) LSAN_OPTIONS=$(LSAN_OPTIONS) \
				$(RUNTOOL) ${NODEJS} $${RUNME}; \
		else \
			if [ -n "$(TYPESCRIPT)" ]; then \
				$(TSC) --noEmit $(TSCOPT) $*.d.ts ; \
			fi \
		fi

  %.ctest:
		$(_setup)
		+$(swig_and_compile_c)
		$(run_testcase)
  %.cpptest:
		$(_setup)
		+$(swig_and_compile_cpp)
		$(run_testcase)

  %.multicpptest:
		$(_setup)

else

	run_testcase = \
		if [ -f $(srcdir)/$*$(SCRIPTSUFFIX) ]; then \
		  $(RUNTOOL) $(top_builddir)/Tools/javascript/javascript -$(JSENGINE) $(srcdir)/$*$(SCRIPTSUFFIX); \
		fi

  %.ctest:
		$(_setup)
		+$(swig_and_compile_c)
		$(run_testcase)

  %.cpptest:
		$(_setup)
		+$(swig_and_compile_cpp)
		$(run_testcase)

  %.multicpptest:
		$(_setup)
		+$(swig_and_compile_multi_cpp)
		$(run_testcase)

endif


%.clean:
	@rm -rf $*
	@rm -f $*_wrap.* $*_wrap_*.cxx  $*$(SO) $*.$(OBJEXT)
	@rm -f $*$(SCRIPTASYNCSUFFIX) $*$(SCRIPTWASMSUFFIX)
	@rm -f $*.d.ts $*_ts_runme.mjs $*_ts_runme.js $*_ts_runme.ts $*_wrap.cjs $*_mjs_runme.mjs

clean:
	for ext in _wrap.cxx _wrap.$(OBJEXT) $(SO); do \
		rm -f clientdata_prop_a$${ext} clientdata_prop_b$${ext}; \
		rm -f imports_a$${ext} imports_b$${ext}; \
		rm -f import_stl_a$${ext} import_stl_b$${ext}; \
		rm -f mod_a$${ext} mod_b$${ext}; \
		rm -f multi_import_a$${ext} multi_import_b$${ext} multi_import_d$${ext}; \
		rm -f packageoption_a$${ext} packageoption_b$${ext} packageoption_c$${ext}; \
		rm -f template_typedef_cplx2$${ext}; \
	done
